import heapq


goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  


moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]


def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def state_to_tuple(state):
    return tuple(tuple(row) for row in state)


def misplaced_tiles(state):
    """Heuristic: number of misplaced tiles"""
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal_state[i][j]:
                count += 1
    return count


def manhattan_distance(state):
    """Heuristic: sum of Manhattan distances"""
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_i = (val - 1) // 3
                goal_j = (val - 1) % 3
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance


def get_neighbors(state):
    neighbors = []
    i, j = find_blank(state)
    for dx, dy in moves:
        x, y = i + dx, j + dy
        if 0 <= x < 3 and 0 <= y < 3:
            new_state = [row[:] for row in state]
            new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
            neighbors.append(new_state)
    return neighbors


def a_star(start_state, heuristic):
    pq = []
    heapq.heappush(pq, (heuristic(start_state), 0, start_state, []))
    visited = set()

    while pq:
        f, g, state, path = heapq.heappop(pq)

        if state == goal_state:
            return path + [state]

        state_tuple = state_to_tuple(state)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for neighbor in get_neighbors(state):
            if state_to_tuple(neighbor) not in visited:
                new_g = g + 1
                new_f = new_g + heuristic(neighbor)
                heapq.heappush(pq, (new_f, new_g, neighbor, path + [state]))
    return None


def print_solution(path):
    for step, state in enumerate(path):
        print(f"Step {step}:")
        for row in state:
            print(row)
        print()


if __name__ == "__main__":
    
    start_state = [[1, 2, 3],
                   [4, 0, 6],
                   [7, 5, 8]]

    print("A* with Misplaced Tiles Heuristic:")
    path1 = a_star(start_state, misplaced_tiles)
    print_solution(path1)

    print("A* with Manhattan Distance Heuristic:")
    path2 = a_star(start_state, manhattan_distance)
    print_solution(path2)
